using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using OhioBox.Moranbernate.Generators;
using OhioBox.Moranbernate.Logging;
using OhioBox.Moranbernate.Mapping;
using OhioBox.Moranbernate.Querying;

namespace OhioBox.Moranbernate.Utils
{
	public static class ConnectionExt
	{
		public static int AtomicIncrement<T>(this IDbConnection connection, Action<IRestrictable<T>> restriction, Expression<Func<T, object>> property, int amount)
			where T : class
		{
			var parameters = new List<object>();
			var sql = new AtomicIncrementGenerator<T>().GetSql(restriction, property, amount, parameters);
			return AttachParamsAndRun(connection, sql, parameters);
		}

		public static T Update<T>(this IDbConnection connection, T t)
			where T : class
		{
			AttachParamsAndRun(connection, t, CrudOperator<T>.Update);
			return t;
		}

		public static void BulkInsert<T>(this IDbConnection connection, IList<T> items)
			where T : class
		{
			if (items.Count == 0)
				return;

			var commandGenerator = new BulkInsert<T>();

			var sql = commandGenerator.GetSql(items.Count);
			var parameters = items.SelectMany(item => commandGenerator.GetColumns().Select(c => c.ValueAccessor(item))).ToList();
			AttachParamsAndRun(connection, sql, parameters);
		}

		public static void BulkUpsert<T>(this IDbConnection connection, IList<T> items)
			where T : class
		{
			if (items.Count == 0)
				return;

			var commandGenerator = new BulkUpsert<T>();

			var sql = commandGenerator.GetSql(items.Count);
			var parameters = items.SelectMany(item => commandGenerator.GetColumns().Select(c => c.ValueAccessor(item))).ToList();
			AttachParamsAndRun(connection, sql, parameters);
		}


		public static T Insert<T>(this IDbConnection connection, T t)
			where T : class
		{
			var commandGenerator = CrudOperator<T>.Insert;
			var parameters = commandGenerator
				.GetColumns()
				.Select(x => x.ValueAccessor(t))
				.ToArray();

			using (var command = connection.CreateCommand())
			{
				command.CommandText = commandGenerator.GetSql();
				command.AttachPositionalParameters(parameters);
				var map = MappingRepo<T>.GetMap();
				if (map.HasAutoGeneratedId())
				{
					var id = command.ExecuteScalar();
					map.Identifiers[0].SetValue(t, id);
					return t;
				}
				CommandRunner.ExecuteCommandAndLog(command);
			}

			return t;
		}

		public static T Delete<T>(this IDbConnection connection, T t)
			where T : class
		{
			AttachParamsAndRun(connection, t, CrudOperator<T>.Delete);
			return t;
		}

		public static int DeleteByQuery<T>(this IDbConnection connection, Action<IRestrictable<T>> restriction)
			where T : class
		{
			var parameters = new List<object>();
			var sql = new DeleteByQuery<T>().GetSql(restriction, parameters);
			return AttachParamsAndRun(connection, sql, parameters);
		}

		public static int UpdateByQuery<T>(this IDbConnection connection, Action<IUpdateStatementBuilder<T>> builder, Action<IRestrictable<T>> restriction)
			where T : class
		{
			var parameters = new List<object>();
			var sql = new UpdateByQuery<T>().GetSql(builder, restriction, parameters);
			return AttachParamsAndRun(connection, sql, parameters);
		}

		public static T Upsert<T>(this IDbConnection conn, T t)
			where T : class
		{
			var map = MappingRepo<T>.GetMap();
			var property = map.Identifiers[0];

			if (map.Identifiers.Count != 1 || property.Insert)
			{
				var command = CrudOperator<T>.Upsert;
				if (command == null)
					throw new UpsertNotSupportedOnAutoGeneratedIdTypesException(typeof(T));

				AttachParamsAndRun(conn, t, command);
				return t;
			}

			var id = property.ValueAccessor(t);
			if (property.Type.GetTypeInfo().IsValueType && Activator.CreateInstance(property.Type).Equals(id)) // default value
			{
				conn.Insert(t);
				return t;
			}

			conn.Update(t);
			return t;
		}

		private static int AttachParamsAndRun<T>(IDbConnection connection, T t, ISqlCommandGenerator commandGenerator)
			where T : class
		{
			var parameters = commandGenerator
				.GetColumns()
				.Select(x => x.ValueAccessor(t))
				.ToArray();

			return AttachParamsAndRun(connection, commandGenerator.GetSql(), parameters);
		}

		private static int AttachParamsAndRun(IDbConnection connection, string sql, IList<object> parameters)
		{
			using (var command = connection.CreateCommand())
			{
					command.CommandText = sql;
					command.AttachPositionalParameters(parameters);

					return CommandRunner.ExecuteCommandAndLog(command);
			}
			
		}
	}
}